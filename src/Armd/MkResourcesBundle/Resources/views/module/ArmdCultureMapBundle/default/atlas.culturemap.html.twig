    <style type="text/css">
        .br10{ margin-bottom:10px; }
        .small-gray{ font-size:11px; color:#777; }

        #ajax-loading{ display:none; position:fixed; z-index:2; left:50%; padding:5px 10px; background:#fed; }

        .colLeft{ width:300px; height:600px; float:left; position:relative; z-index:1; background:#fff; }
        .colRightContainer{ float:right; width:100%; margin-left:-300px; }
        .colRight{ margin-left:300px; }

        #map{ width:100%; height:600px; }
        .ymaps-default-cluster{ color:#FFFFFF; font-size:11px !important; }

        .dashboard{ }
        .dashboard .padder{ }

        legend{ color:#C99B4C; margin-bottom:5px; }

        #geometry{ clear:both; }

        .topshadow{ position:absolute; z-index:200; height:21px; }
        .topshadow .inner{ height:21px; background:url({{ asset('bundles/armdculturemap/images/topshadow.png') }}) 0 0 repeat-x; }

        .markBalloonLayout{ position:relative; width:315px; padding:0px 2px 10px 5px; border:4px solid #EBCB00; background:#fff; }
        .markBalloonLayout.region{ top:-50px; left:0px; }

        .markBalloonLayout .close{ float:right; display:block; width:16px; height:16px; background:#f00; background:url({{ asset('bundles/armdmkresources/img/ico.png') }}) no-repeat scroll -7px -231px transparent; }
        .markBalloonLayout h2{ margin:10px 0 10px 0; font-size:14px; }
        .markBalloonLayout table{ font-size:11px; width:100%; color:#333; }
        .markBalloonLayout table th, .markBalloonLayout table td{ padding:0 5px 5px 0; font-weight:normal; text-align:left; }
        .markBalloonLayout table th{ color:#DA5C11; width:50%; }


        .balloon-region-logo{ float:left; margin: 0 10px 0 0; }
        .balloon-region-content{ margin-bottom:10px; font-size:11px; color:#7A7A7A; }
        .balloon-region-content h2{ font-size:20px; }


        #content-i-wide{ padding:0; }

        .atlas-aside { padding:10px; background:#fff; font-size:13px; }
        .atlas-aside-title { text-transform: uppercase; font: bold 14px/1.25 'trebuchet ms',sans-serif; padding-bottom: 5px; border-bottom: 2px solid #da5c11; color: #262626; }
        .atlas-region{ margin-bottom:20px; }
        .atlas-map, .atlas-points {}
        .atlas-region select { padding: 0 0 0 3px; margin: 0; height: 19px; border: 1px solid #d2d3d3; color: #575757; font: bold 10px/100% 'trebuchet ms',sans-serif; }
        .atlas-region-default { color: #262626; font-size:11px; margin: 2px 0 10px 10px; }
        .atlas-map { }
        .atlas-aside-searchbox{ margin:0 0 5px 0; }
        .atlas-aside-searchbox .inp-txt input{ background:url("{{ asset('bundles/armdculturemap/images/chosen-sprite.png') }}") no-repeat scroll 100% -22px, -moz-linear-gradient(center top , #EEEEEE 1%, #FFFFFF 15%) repeat scroll 0 0 transparent; border:solid 1px #aaa; height:23px; line-height:24px; padding-left:8px; color:#444; }
        .atlas-aside-searchbox .inp-btn input{ border:none; overflow:hidden; background:#ee7; width:25px; height:23px; line-height:24px; padding-left:8px; position:relative; left:-30px; opacity:0; color:#444; }

        .atlas-aside-group-menu { margin-bottom:15px; }
        .atlas-aside-group-menu a { margin-right:10px; text-decoration:none; border-bottom:dashed 1px #E39D6F; font-size:11px; }
        .atlas-aside-group-menu a:hover { color:#000; border-bottom:none; }
        .atlas-map-types{ margin:0; padding:0; list-style-type:none; }
        .atlas-map-types.scroll-pane{ height:350px; }
        .atlas-map-item { padding:0px 0 0 5px; clear: both; margin-bottom: 0px; overflow: hidden; }
        .atlas-map-item-toggle { float: left; background: url('{{ asset('bundles/armdculturemap/images/narrow-right.gif') }}') no-repeat; width: 5px; height:9px; margin: 5px 8px 0 0; }
        .atlas-map-item-icon { float:left; }
        .atlas-map-item-icon img {width: 100%; height: auto;}
        .atlas-map-item-checkbox{ float:left; margin-right: 7px; float: left; }
        .atlas-map input { }
        .atlas-map label { padding-left: 5px; display: block; float: left; width: 215px; }
        .atlas-points ul { margin: 0; padding: 0; }
        .atlas-points ul li { list-style: none; margin: 0 0 14px 0; padding-left: 16px; background-position: left 5px; line-height: 100%; text-indent: 0em; }
        .atlas-points ul li a { color: #262626; font: bold 10px 'trebuchet ms',sans-serif; display: block; padding: 0; margin: 0; }
        .scroll-pane { height: 127px; }
    </style>
    <!--[if IE 7]>
        <style>
            .atlas-points ul li a { zoom: 1; }
            .atlas-points ul li { padding-left: 0px; }
        </style>
    <![endif]-->
    <link rel="stylesheet" href="{{ asset('bundles/armdculturemap/css/jquery.jscrollpane.css') }}"/>
    <link rel="stylesheet" href="{{ asset('bundles/armdculturemap/css/chosen.css') }}" />
    <script src="//api-maps.yandex.ru/2.0/?load=package.full&lang=ru-RU"></script>
    <script src="{{ asset('bundles/armdculturemap/js/jquery.form.js') }}"></script>
    <script src="{{ asset('bundles/armdculturemap/js/jquery.mousewheel.js') }}"></script>
    <script src="{{ asset('bundles/armdculturemap/js/chosen.jquery.js') }}"></script>
    <script src="{{ asset('bundles/armdculturemap/js/jquery.jscrollpane.min.js') }}"></script>
    <script type="text/javascript">
        // Урлы к модулям
        var regionsGeometryUri   = '{{ asset('bundles/armdculturemap/js/regions.json') }}',
            bundleImagesUri      = '{{ asset('bundles/armdculturemap/images') }}',
            fetchMarkersUri      = '/_sys/map/testmarkers',
            fetchMarkerDetailUri = '/_sys/map/testmarkerdetail',
            fetchRegionDetailUri = '/_sys/map/testregiondetail';
    </script>

    <script type="text/javascript">
        //////////////////////////
        var myMap, clusterer, regionsCollection, collection, markersGroups=[], markBalloonLayout, regionBalloonLayout;
        ymaps.ready(init);
        function init() {

            myMap = new ymaps.Map("map", {
                type: 'yandex#map',
                center: [58.057714,95.030941],
                zoom: 3,
                behaviors: ["default", "drag", "scrollZoom", "zoomControl"]
            });

            clusterer = new ymaps.Clusterer({
                clusterDisableClickZoom: false, // запретим приближать карту при клике на кластеры
                gridSize: 64,
                clusterIcons: [
                    {
                        href: bundleImagesUri + '/Atlas-cluster1.png',
                        size: [26, 26],
                        offset: [-13, -13]
                    }, {
                        href: bundleImagesUri + '/Atlas-cluster2.png',
                        size: [32, 32],
                        offset: [-16, -16]
                    }
                ],
                clusterNumbers: [99]
            });

            // Макет балуна для полигона региона
            regionBalloonLayout = ymaps.templateLayoutFactory.createClass('<div class="markBalloonLayout region"><a id="balloon-close" class="close" href="#"></a>$[[options.contentLayout]]</div>', {
                build: function () {
                    this.constructor.superclass.build.call(this);
                    var balloon = this.getData().geoObject.balloon; 
                    $('#balloon-close').bind('click', function() {
                        balloon.close();
                        return false;
                    });
                    //console.log(this.getClientBoundingRect());
                }
            });

            // Макет балуна для маркера
            markBalloonLayout = ymaps.templateLayoutFactory.createClass('<div class="markBalloonLayout"><a id="balloon-close" class="close" href="#"></a>$[[options.contentLayout]]</div>', {
                build: function () {
                    this.constructor.superclass.build.call(this);
                    var balloon = this.getData().geoObject.balloon; 
                    $('#balloon-close').bind('click', function() {
                        balloon.close();
                        return false;
                    });
                    //console.log(this.getClientBoundingRect());
                }
            });

            myMap.geoObjects.add(clusterer);

            regionsCollection = new ymaps.GeoObjectCollection();

            myMap.controls
                .add('zoomControl') // Кнопка изменения масштаба
                .add('typeSelector') // Список типов карты
                .add('searchControl') // Панель поиска
                //.add('mapTools') // Стандартный набор кнопок
                .add(new ymaps.control.ScaleLine());

            // У карты изменены границы (bounds).
            //myMap.events.add('boundschange', function(e){
                //console.log('boundschange');
                //e.originalEvent.oldZoom - старый зум уровень
                //e.originalEvent.newZoom - новый зум уровень 
            //});


            /*
            // Открылся балун
            clusterer.events.add('balloonopen', function(e){
                console.log('e', e);
                var target = e.get('target');
                console.log('target', target);
                var balloon = e.originalEvent.balloon;
                console.log('e.originalEvent', e.originalEvent.target);
                //console.log('balloonopen', balloon);
                //console.log(target.geoObjects);
                //balloon.properties.set({ contentLayout:'xxxxxxxxxxxxxxxxxxxxxxxxx' });
            });
            */

            // Рисуем регионы
            addRegions();

            // Рисуем метки учреждений
            //addMarkers();

        } // end of init()

        function isset(variable) {
            return ! (typeof(variable)=='undefined' || variable===null);
        }

        // Рисуем регионы
        function addRegions() {
            $.getJSON(regionsGeometryUri, function(regions){
                for (var i=0; i<regions.length; i++) {
                    var region = regions[i];
                    var geometry = region.geometry,
                        properties = {
                            oid: region.id,
                            hintContent: region.name
                        },
                        optionsStatic = {
                            balloonLayout: regionBalloonLayout,
                            balloonShadow: false,
                            balloonContentSize: [315, 400],
                            interactivityModel: 'default#transparent',
                            fill: true,
                            draggable: false,
                            strokeWidth: 1.5,
                            strokeColor: '#4F95FF',
                            fillColor:   '#ff880077',
                            openBalloonOnClick: false
                        },
                        optionsHover = {
                            interactivityModel: 'default#transparent',
                            fill: true,
                            draggable: false,
                            strokeWidth: 2,
                            strokeColor: '#ffffff',
                            fillColor:   '#0065FF77'
                        },
                        polygon = new ymaps.Polygon(geometry, properties, optionsStatic);

                    regionsCollection.add(polygon);

                    polygon.events.add('mouseenter', function(e){
                        var target = e.get('target');
                        target.options.set(optionsHover);
                    });
                    polygon.events.add('mouseleave', function(e){
                        var target = e.get('target');
                        target.options.set(optionsStatic);
                    });

                    // Пользователь кликнул на региону. Карта подстраивается под регион.
                    polygon.events.add('click', function(e){
                        var pl = e.get('target'),
                            regionId = pl.properties.get('oid');

                        showAjaxLoading();
                        pl.balloon.close();
                        $.ajax({
                            url: fetchRegionDetailUri,
                            data: { id: regionId },
                            success: function(res){
                                hideAjaxLoading();
                                pl.properties.set({ balloonContentBody: res });
                                var t = setTimeout(function(){
                                    pl.balloon.open(myMap.getCenter());
                                }, 1000);
                            }
                        });
                        zoomToRegion(regionId, function(){
                            $('#regions-selector').val(regionId);
                            $('#regions-selector').trigger('liszt:updated');
                        });

                    });

                } // endforeach

                // Наносим коллекцию регионов на карту
                myMap.geoObjects.add(regionsCollection);

                // Заполняем список регионов
                buildRegionsComboBox(regions);
            });
        }

        function zoomToRegion(id, callback) {
            var myGeoobject = findRegionById(id);
            var bounds = getGeoBounds(myGeoobject);
            myMap.setBounds(bounds, {
                checkZoomRange: true,
                duration: 600,
                callback: function(err) {
                    if (! err) {
                        callback();
                    }
                }
            });
        }

        // Находит минимальные и максимальные координаты вершин списка полигонов
        function getGeoBounds(myGeoobject) {
            var polys = myGeoobject.geometry.getCoordinates(),
                first_run, max_lat, max_long, min_lat, min_long;
                min_lat = min_long = max_lat = max_long = 0,
                first_run = true;
            for (var j=0; j<polys.length; j++) {
                collection = polys[j];
                for (var k=0; k<collection.length; k++) {
                    var i = collection[k];
                    var lat, long, _ref;
                    _ref = i, lat = _ref[0], long = _ref[1];
                    if (first_run) {
                        first_run = false;
                        min_lat = max_lat = lat;
                        min_long = max_long = long;
                    } else {
                        min_lat = Math.min(min_lat, lat);
                        max_lat = Math.max(max_lat, lat);
                        min_long = Math.min(min_long, long);
                        max_long = Math.max(max_long, long);
                    }
                }
            }
            return [[min_lat, min_long],[max_lat, max_long]];
        }

        // Подсвечиваем регион на карте
        function highlightRegionById(id) {
            var region = findRegionById(id);
            //region.options.set(optionsHover);
            //region.options.set('visible', false);
        }

        // Поиск региона в коллекции
        function findRegionById(id) {
            var region;
            regionsCollection.each(function(i){
                if (i.properties.get('oid') == id) {
                    region = i;
                    return;
                }
            });
            return region;
        }

        // Заполняем список регионов
        function buildRegionsComboBox(regions) {
            // Пользователь выбрал регион в списке. Карта зумится на регион.
            $('#regions-selector').change(function(){
                var regionId = $(this).val();
                zoomToRegion(regionId, function(){
                    highlightRegionById(regionId);
                });
            });
        }

        // ajax-loading
        function showAjaxLoading() {
            $('#ajax-loading').show();
        }
        function hideAjaxLoading() {
            $('#ajax-loading').hide();
        }

        // Добавление меток на карту
        function drawPlacemarks(placemarksData, callback) {
            if (! callback) {
                var callback = function(){};
            }
            var placemarks = [];
            for (var i=0; i<placemarksData.length; i++) {
                var row = placemarksData[i],
                    placemark = new ymaps.Placemark([row.lat, row.lng], {
                        // Свойства метки
                        oid: row.id,
                        name: row.title,
                        //iconContent: '#'+row.id,
                        hintContent: row.title,
                        balloonContent: row.title,
                        clusterCaption: row.title,
                        clusterContent: ''
                        //balloonContentHeader: row.title + ' (balloonContentHeader)',
                        //balloonContentBody: 'balloonContentBody',
                        //balloonContentFooter: 'balloonContentFooter'
                    }, {
                        // Опции балуна метки
                        //balloonContentBodyLayout: myBalloonLayout,
                        hideIconOnBalloonOpen: false,
                        balloonLayout: markBalloonLayout,
                        balloonShadow: false,
                        balloonContentSize: [315, 300],
                        //balloonContentLayout: myBalloonContentLayout,
                        //balloonContentBodyLayout: myBalloonContentBodyLayout,

                        // Иконка метки
                        iconImageHref: bundleImagesUri + '/pin_big_'+row.type+'.png',
                        iconImageSize: [27, 43],
                        iconImageOffset: [-13, -43],

                        openBalloonOnClick: false
                    });

                // Открытие балуна через событие клика по маркеру
                // Пользователь кликнул на метке кластера. Карта подстраивается под метки кластера
                placemark.events.add('click', function(e){
                    var pl = e.get('target');
                    var oid = pl.properties.get('oid');
                    
                    showAjaxLoading();

                    $.ajax({
                        url: fetchMarkerDetailUri,
                        data: { id: oid },
                        success: function(res){
                            hideAjaxLoading();
                            pl.properties.set({ balloonContentBody: res });
                            pl.balloon.open();
                        }
                    });
                });

                // Добавляем маркер в группу
                placemarks.push(placemark);
            }

            clusterer.removeAll();
            clusterer.add(placemarks);

            callback();
        }

        //////////////////////////////////////////////
        $(function(){

            $('#toggle-regions').change(function(){
                regionsCollection.options.set('visible', $(this).is(':checked'));
            });

            // Фильтр по типам объектов
            //$('#filter-types')[0].reset();
            var cbTypes = $('#filter-types').find('.cb-type');
            cbTypes.on('change', function(){
                $('#filter-types').submit();
            });
            /*
            cbTypes.on('change', function(){
                var typeId = $(this).val();
                if ($(this).is(':checked')) {
                    console.log('Try to load type:', typeId);
                    if (! isset(markersGroups[typeId])) {
                        console.log('Not loaded. Do load.');
                        showAjaxLoading();
                        loadMarkers(typeId, function(){
                            hideAjaxLoading();
                        });
                    }
                } else {
                    // Галка снята. Удаляем метки с карты
                    console.log(typeId + ' will remove.');
                    clusterer.removeAll();
                }
            });
            */
            // Отметить/снять отметку со всех галок
            $('.atlas-aside-group-menu a').click(function(){
                if ($(this).hasClass('select')) {
                    cbTypes.each(function(i,el){
                        $(el).attr('checked', 'checked');
                    });
                } else {
                    cbTypes.each(function(i,el){
                        $(el).removeAttr('checked');
                    });
                }
                $('#filter-types').submit();
                return false;
            });

            // Filter form
            $('#filter-types').ajaxForm({
                url: fetchMarkersUri,
                beforeSubmit: function() {
                    if (clusterer) {
                        clusterer.removeAll();
                    }
                    showAjaxLoading();
                },
                dataType: 'json',
                success: function(res) {
                    hideAjaxLoading();
                    if (res.result.length) {
                        drawPlacemarks(res.result);
                    } else {
                        //alert('Ничего не найдено.');
                    }
                }
            });

            // Суперселекты для регионов
            $('.chzn-select').chosen();
            $('.chzn-select-deselect').chosen({ allow_single_deselect: true });
            $('#regions-selector').find('option:first')
                                  .attr('selected','selected')
                                  .trigger("liszt:updated");

            // прототип пробую скрыть отдельный регион через visible-свойство
            //var region = findRegionById(3);
            //console.log(region);
            //region.options.set('visible', false);

            setTimeout(function(){
                $('#filter-types').submit();
            }, 3000);

        });
       // Скроллбокс для фильтра объектов
        $(window).load(function(){
            $('#map-types-pane').jScrollPane({
                showArrows: true,
                arrowScrollOnHover: true
            });
        });
        
        
    </script>

    <div id="ajax-loading">Загрузка данных&hellip;</div>

    <div class="colLeft">
        <div class="dashboard">

            <form id="filter-types" method="get" action="">
                <div class="atlas-aside">
                    <div class="atlas-region">
                        <h1 class="atlas-aside-title">Регион</h1>
                        <select id="regions-selector" name="region" data-placeholder="Введите название региона..." class="chzn-select">
                            <option value="" selected="selected">Все регионы</option>
                            {% for region in regions %}
                                <option value="{{ region.id }}">{{ region.title }}</option>
                            {% endfor %}
                        </select>
                        <p class="atlas-region-default">По умолчанию выбраны все регионы</p>                
                        <div class="br10">
                            <label><input id="toggle-regions" type="checkbox" checked="checked"> Границы регионов</label>
                        </div>
                    </div>
                    <div class="atlas-map">
                        <h1 class="atlas-aside-title">Показать на карте</h1>
                        <div class="atlas-aside-searchbox">
                            <input type="text" name="search" size="30"/>
                            <input type="submit" value="Найти"/>
                        </div>
                        <div class="atlas-aside-group-menu">
                            <a class="select" href="#">Отметить все</a>
                            <a class="unselect" href="#">Снять отметки</a>
                        </div>
                        <ul id="map-types-pane" class="scroll-pane atlas-map-types">
                            {% for type in objectTypes %}
                                <li class="atlas-map-item">
                                    <span class="atlas-map-item-toggle"></span>
                                    <span class="atlas-map-item-checkbox"><input id="check{{ type.id }}" class="cb-type" type="checkbox" name="type[]" value="{{ type.id }}" checked/></span>
                                    <span class="atlas-map-item-icon"><img src="{{ asset('bundles/armdculturemap/images/pin'~type.id~'.png') }}" alt=""/></span>
                                    <label class="check-musem" for="check{{ type.id }}">
                                        {{ type.title }}&nbsp;<span class="small-gray">({{ type.objectsCount }})</span>
                                    </label>
                                </li>
                            {% endfor %}
                        </ul>
                    </div>
                </div>
            </form>

        </div>
    </div>
    <div class="colRightContainer">
        <div class="colRight">
            <div class="topshadow">
                <div class="inner"></div>
            </div>
            <div id="map"></div>
        </div>
    </div>

    <div id="geometry"></div>
