<?php

namespace Armd\ExhibitBundle\Repository;

use Gedmo\Tree\Entity\Repository\NestedTreeRepository;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends NestedTreeRepository
{
    private $container;

    public function getNodesAsArray()
    {
        $qb = $this->createQueryBuilder('c')
//            ->where('c.root = (:root)')
            ->Where('c.lvl > 0')
//            ->setParameter('root', 1)
            ->orderBy('c.lft', 'ASC');
        $rows = $qb->getQuery()->getResult();

        return $rows;
    }

    // рекурсивно перебрать узлы $arrayTree и собрать другой массив
    public function getArrayTree($nodeId=false)
    {
        $arrayTree = $this->childrenHierarchy();
        $resultTree = $this->getArrayNodeChildren($arrayTree[0]['__children'], $nodeId);
        return $resultTree;
    }

    protected function getArrayNodeChildren($nodes, $nodeId=false)
    {
        //$router = $this->container->get('router');

        $resultNodes = array();

        foreach ($nodes as $node) {
            $isFolder = isset($node['__children']) && sizeof($node['__children']);
            $resultNode = array(
                'id' => $node['id'],
                'lvl' => $node['lvl'],
                'lft' => $node['lft'],
                'title' => $node['title'],
                //'isFolder' => $isFolder,
                //'nodeId' => $nodeId,
                //'addClass' => 'ws-wrap',
                //'showUrl' => $router->generate('armd_mediabase_structure_show', array('id'=>$node['id'])),
                //'addUrl' => $router->generate('armd_mediabase_structure_add', array('id'=>$node['id'])),
                //'editUrl' => $router->generate('armd_mediabase_structure_edit', array('id'=>$node['id'])),
                //'deleteUrl' => $router->generate('armd_mediabase_structure_edit', array('id'=>$node['id'])),
            );
            if ($isFolder) {
                $resultNode['children'] = $this->getArrayNodeChildren($node['__children'], $nodeId);
            }
            $resultNodes[] = $resultNode;
        }

        return $resultNodes;
    }


    public function setContainer(ContainerInterface $container = null)
    {
        $this->container = $container;
    }

    public function getDataForFilter($ids=array())
    {
        $qb = $this->createQueryBuilder('t1')
            ->select('t1.id, t1.title AS category, t2.id AS tag_id, t2.title AS tag, t2')
            ->innerJoin('ArmdAtlasBundle:Category', 't2', 'WITH', 't2.lft > t1.lft AND t2.rgt < t1.rgt')
            ->where('t1.lvl = 1')
            ->orderBy('t1.lft', 'ASC')
            ->orderBy('t2.lft', 'ASC');

        if ($ids) {
            $qb->andWhere('t2.id IN (:ids)')
               ->setParameter('ids', $ids);
        }

        $rows = $qb->getQuery()->getResult();
        $tags = array();
        $cats = array();
        $result = array();
        foreach ($rows as $row) {
            $cats[$row['id']] = $row['category'];
            $tags[$row['id']][] = array(
                'id' => $row['tag_id'],
                'title' => $row['tag'],
                'hasIcon' => ($row[0]->getIconMedia() ? true : false),
            );
        }
        foreach ($cats as $categoryId => $categoryTitle) {
            $result[] = array(
                'id' => $categoryId,
                'title' => $categoryTitle,
                'tags' => $tags[$categoryId],
            );
        }
        return $result;
    }

}
