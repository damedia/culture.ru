<?php

namespace Armd\AtlasBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator as DoctrinePaginator;

/**
 * ObjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ObjectRepository extends EntityRepository
{
    public function filter($params = array())
    {
        $categoryIds = $params['category'];
        $qb = $this->createQueryBuilder('o');
        $qb->innerJoin('o.secondaryCategories', 'c')
            ->where('o.published = TRUE')
            ->andWhere($qb->expr()->orX(
                $qb->expr()->in('c', $categoryIds),
                $qb->expr()->in('o.primaryCategory', $categoryIds)
            ));
        $rows = $qb->getQuery()->getResult();
        return $rows;
    }

    public function getRussiaImagesCount()
    {
        $objectCount = $this->createQueryBuilder('o')
            ->select('COUNT(o)')
            ->where('o.showAtRussianImage = TRUE')
            ->andWhere('o.published = TRUE')
            ->getQuery()
            ->getSingleScalarResult();
        return $objectCount;
    }

    public function findRussiaImages($limit = null)
    {
        $qb = $this->createQueryBuilder('o')
            ->select('o, pi, r')
            ->leftJoin('o.primaryImage', 'pi')
            ->leftJoin('o.regions', 'r')
            ->where('o.showAtRussianImage = TRUE')
            ->andWhere('o.published = TRUE')
            ->orderBy('o.createdAt', 'DESC');

        if (!is_null($limit)) {
            $qb->setMaxResults($limit);
        }

        $paginator = new DoctrinePaginator($qb->getQuery());
        $objects = $paginator->getIterator();

        return $objects;
    }

    public function findRandomRussiaImages($limit)
    {
        $objectCount = $this->getRussiaImagesCount();

        if ($objectCount <= $limit) {
            $objects = $this->findRussiaImages($limit);
        }
        else {
            $offsets = array();
            for ($i = 0; $i < $limit; $i++) {
                $j = 0;
                do {
                    $offset = rand(0, $objectCount - 1);
                } while ($j++ < 10 && in_array($offset, $offsets));
                $offsets[] = $offset;
            }

            $objects = array();
            foreach ($offsets as $offset) {
                $objects[] = $this->createQueryBuilder('o')
                    ->select('o')
                    ->where('o.showAtRussianImage = TRUE')
                    ->andWhere('o.published = TRUE')
                    ->setMaxResults(1)
                    ->setFirstResult($offset)
                    ->getQuery()->getSingleResult();
            }
        }

        return $objects;
    }

    /**
     * Get russia images in the very specific way:
     * - first 3 are last added
     * - all others in random order
     */
    public function findRussiaImagesForSlider()
    {
        $lastObjects = $this->createQueryBuilder('o')
            ->where('o.showAtRussianImage = TRUE')
            ->andWhere('o.published = TRUE')
            ->orderBy('o.createdAt', 'DESC')
            ->setMaxResults(3)
            ->getQuery()
            ->getResult();

        $randomObjects = $this->createQueryBuilder('o')
            ->where('o.showAtRussianImage = TRUE')
            ->andWhere('o.published = TRUE')
            ->orderBy('o.createdAt', 'DESC')
            ->setFirstResult(3)
            ->getQuery()
            ->getResult();

        shuffle($randomObjects);

        return array_merge($lastObjects, $randomObjects);
    }

    public function fetchObjectsCategories($objects)
    {
        $objectsIds = array();
        foreach ($objects as $obj)
            $objectsIds[] = $obj->getId();
        $qb = $this->createQueryBuilder('o')
                   ->select('o.id objectId, c.id categoryId , c.title')
                   ->innerJoin('o.secondaryCategories', 'c')
                   ->where('o IN (:objectsIds)')
                   ->setParameter('objectsIds', $objectsIds);
        $result = $qb->getQuery()->getResult();
        $res = array();
        foreach ($result as $row)
            $res[] = $row['categoryId'];
        return array_unique($res);
    }

    public function filterModerating($filter)
    {
        $qb = $this->createQueryBuilder('o');
        $qb->where('o.isOfficial = FALSE');
        if (isset($filter['title']) && !empty($filter['title'])) {
            $qb->andWhere('o.title LIKE :title')
               ->setParameter('title', '%'.$filter['title'].'%');
        }
        if (isset($filter['status']) && !empty($filter['status'])) {
            $qb->andWhere('o.status = :status')
               ->setParameter('status', $filter['status']);
        }
        if (isset($filter['createdBy']) && !empty($filter['createdBy'])) {
            $qb->andWhere('o.createdBy = :createdBy')
               ->setParameter('createdBy', $filter['createdBy']);
        }
        if (isset($filter['updatedBy']) && !empty($filter['updatedBy'])) {
            $qb->andWhere('o.updatedBy = :updatedBy')
               ->setParameter('updatedBy', $filter['updatedBy']);
        }
        $qb->orderBy('o.updatedAt', 'DESC');
        $result = $qb->getQuery()->getResult();
        return $result;
    }

}
