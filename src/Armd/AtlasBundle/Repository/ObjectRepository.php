<?php

namespace Armd\AtlasBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ObjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ObjectRepository extends EntityRepository
{
    public function filter($params = array())
    {
        $term = $params['term'];
        $categoryIds = $params['category'];

        $qb = $this->createQueryBuilder('o');
        $qb->innerJoin('o.secondaryCategories', 'c')
            ->where('o.published = TRUE')
            ->andWhere($qb->expr()->orX(
            $qb->expr()->in('c', $categoryIds),
            $qb->expr()->in('o', $categoryIds)
        ));
//            'c IN (:categoryIds)')
//            ->orWhere('o.primaryCategory IN (:categoryIds)')
//            ->setParameter('categoryIds', $categoryIds);

        $rows = $qb->getQuery()->getResult();
        return $rows;
    }

    public function getRussiaImagesCount()
    {
        $objectCount = $this->createQueryBuilder('o')
            ->select('COUNT(o)')
            ->where('o.showAtRussianImage = TRUE')
            ->andWhere('o.published = TRUE')
            ->getQuery()
            ->getSingleScalarResult();
        return $objectCount;
    }

    public function findRussiaImages($limit = null)
    {
        $qb = $this->createQueryBuilder('o')
            ->select('o, pi, r')
            ->leftJoin('o.primaryImage', 'pi')
            ->leftJoin('o.regions', 'r')
            ->where('o.showAtRussianImage = TRUE')
            ->andWhere('o.published = TRUE');

        if (!is_null($limit)) {
            $qb->setMaxResults($limit);
        }

        $objects = $qb->getQuery()
            ->getResult();

        return $objects;
    }

    public function findRandomRussiaImages($limit)
    {
        $objectCount = $this->getRussiaImagesCount();

        if ($objectCount <= $limit) {
            $objects = $this->findRussiaImages($limit);
        }
        else {
            $offsets = array();
            for ($i = 0; $i < $limit; $i++) {
                $j = 0;
                do {
                    $offset = rand(0, $objectCount - 1);
                } while ($j++ < 10 && in_array($offset, $offsets));
                $offsets[] = $offset;
            }

            $objects = array();
            foreach ($offsets as $offset) {
                $objects[] = $this->createQueryBuilder('o')
                    ->select('o')
                    ->where('o.showAtRussianImage = TRUE')
                    ->setMaxResults(1)
                    ->setFirstResult($offset)
                    ->getQuery()->getSingleResult();
            }
        }

        return $objects;
    }

}