<?php

namespace Armd\AtlasBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ObjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ObjectRepository extends EntityRepository
{
    public function filter($params = array())
    {
        //var_dump($params);

        $term = $params['term'];
        $categoryIds = $params['category'];
        $categoryTree = $params['categoryTree'];

        $qb = $this->createQueryBuilder('o');

        foreach ($categoryTree as $i=>$group) {
            $groupIds = array();
            foreach ($group['tags'] as $tag) {
                $groupIds[] = $tag['id'];
            }
            //var_dump($groupIds);
            $groupIds = implode(',',$groupIds);

            $qb->innerJoin('o.secondaryCategories', 't'.$i);
            $qb->andWhere('t'.$i.' IN ('.$groupIds.')');
        }

        $query = $qb->getQuery();
        //print '<pre>'.$query->getSQL().'</pre>';

        $rows = $query->getResult();

        /*
        header('Content-Type: text/html; charset=utf-8');
        print '<table border="1" style="font-size:11px;">';
        foreach ($rows as $row) {
            $tags = array();
            foreach ($row->getSecondaryCategories() as $tag) {
                $tags[] = $tag->getTitle().' ('.$tag->getId().')';
            }
            print '<tr>';
            print '<td>'.$row->getPrimaryCategory()->getTitle().' ('.$row->getPrimaryCategory()->getId().')</td>';
            print '<td>'.implode(', ', $tags).'</td>';
            print '<td>'.$row->getId().'</td>';
            print '<td>'.$row->getTitle().'</td>';
            print '</tr>';
        }
        print '</table>';
        exit;
        */

        return $rows;
    }

    public function getRussiaImagesCount()
    {
        $objectCount = $this->createQueryBuilder('o')
                    ->select('COUNT(o)')
                    ->where('o.showAtRussianImage = TRUE')
                    ->getQuery()->getSingleScalarResult();
        return $objectCount;
    }

    public function findRussiaImages($limit = null)
    {
        $qb = $this->createQueryBuilder('o')
            ->where('o.showAtRussianImage = TRUE');

        if (!is_null($limit)) {
            $qb->setMaxResults($limit);
        }

        $objects = $qb->getQuery()
            ->getResult();

        return $objects;
    }

    public function findRandomRussiaImages($limit)
    {
        $objectCount = $this->getRussiaImagesCount();

        if ($objectCount <= $limit) {
            $objects = $this->findRussiaImages($limit);
        } else {
            $offsets = array();
            for($i = 0; $i < $limit; $i++) {
                $j = 0;
                do {
                    $offset = rand(0, $objectCount - 1);
                } while($j++ < 10 && in_array($offset, $offsets));
                $offsets[] = $offset;
            }

            $objects = array();
            foreach($offsets as $offset) {
                $objects[] = $this->createQueryBuilder('o')
                    ->select('o')
                    ->where('o.showAtRussianImage = TRUE')
                    ->setMaxResults(1)
                    ->setFirstResult($offset)
                    ->getQuery()->getSingleResult();
            }
        }

        return $objects;
    }

}