<?php
/**
 * This file is part of the <name> project.
 *
 * (c) <yourname> <youremail>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Application\Sonata\MediaBundle\Entity;

use Sonata\MediaBundle\Entity\BaseMedia as BaseMedia;

/**
 * This file has been generated by the Sonata EasyExtends bundle ( http://sonata-project.org/easy-extends )
 *
 * References :
 *   working with object : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en
 *
 * @author <yourname> <youremail>
 */
class Media extends BaseMedia
{

    /**
     * @var integer $id
     */
    protected $id;

    protected $title;

    private $formFile;

    private $mediaBeforeUpdate;

    private $removeMedia;

    /**
     * Get id
     *
     * @return integer $id
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * This title is used for image title display in sonata admin
     * @return string
     */
    public function getAdminTitle()
    {
        return $this->getName();
    }

    public function getTitle()
    {
        return $this->title;
    }

    public function setTitle($title)
    {
        $this->title = $title;
    }

    public function getFormFile()
    {
        return $this->formFile;
    }


    public function setFormFile(\Symfony\Component\HttpFoundation\File\UploadedFile $formFile)
    {
        // save previous state to be able clean files in MediaListener
        $this->mediaBeforeUpdate = clone $this;

        $this->formFile = $formFile;
        $this->setBinaryContent($formFile);
    }

    public function getMediaBeforeUpdate()
    {
        return $this->mediaBeforeUpdate;
    }

    public function resetMediaBeforeUpdate()
    {
        $this->mediaBeforeUpdate = null;
    }

    public function getRemoveMedia()
    {
        return $this->removeMedia;
    }

    public function setRemoveMedia($removeMedia)
    {
        // change persistent property to fire MediaListener
        $this->setHeight($this->getHeight() + 1);

        $this->removeMedia = $removeMedia;
    }

    public function isUploaded()
    {
        if (!$this->getRemoveMedia()) {
            if ($this->getProviderStatus() == Media::STATUS_OK
                || !empty($this->formFile)
                || $this->getBinaryContent()
            ) {
                return true;
            }
        }

        return false;
    }

}